#!/usr/bin/env python3
# -*- encoding: utf-8 -*-

import os
import sys
import pickle
import re

import readline as rl
""" 
for moving around in the input line with readline shortcuts 
can be customised by editing ~/.inputrc. see
https://docs.python.org/3.3/tutorial/interactive.html

an example
https://www.tutorialspoint.com/python-gnu-readline-interface
"""

""" import pyperclip """

from math import ceil
from enum import IntEnum
from pathlib import Path
from datetime import datetime
from datetime import timedelta
from configparser import ConfigParser
from argparse import ArgumentParser

""" Define config and data file locations """
config_location = str(Path.home()) + '/.config/todo-ng/'
datafile_location = str(Path.home()) + '/.local/share/todo-ng/'

""" Define config and data file names """
config_name = 'config'
datafile_name = 'todo.dat'
due_string = 'Already due'

""" Define colors """
index_color = '\x1b[36m{}\x1b[0m'
date_color = '\x1b[32m{}\x1b[0m'
due_color = '\x1b[31m{}\x1b[0m'
today_color = '\x1b[4;33m{}\x1b[0m'
tomorrow_color = '\x1b[36m{}\x1b[0m'

now = datetime.now()
dt_string = now.strftime("%a, %e %b %Y, %k:%M")

""" Regex for removing terminal escape sequences from a string """
esc_seq_reg = re.compile(r'\x1b[^m]*m')

class Weekday(IntEnum):
    """ Define Weekday constants """
    MONDAY = 0
    SATURDAY = 5
    SUNDAY = 6

""" List of TodoItems, to be stored later in the datafile """
items = []

class TodoItem:
    """ A class definition for each todo item, which is defined with todo -a, and stored in the datafile """

    def __init__(self, title: str, exp_date: datetime):
        self.title = title
        self.exp_date = exp_date

    @property
    def days_left(self):
        return 999 if self.exp_date is None else (self.exp_date - datetime.today()).days + 1

    def __str__(self):
        if self.exp_date is None:
            return self.title

        # Set the amount of days left as the timedelta from today to the expiration date, in days.
        days_left = self.days_left

        if days_left == 0:
            return self.title + " (Due today)"  # Annotate as the current day
        elif days_left == 1:
            return self.title + " (Due tomorrow)"  # Annotate as tomorrow
        elif days_left > 1:
            output_str = self.title + " ("

            # If in detail mode, annotate more explicitly (i.e. give the due weekday)
            if config['PY-TODO'].getboolean('detail_mode', fallback=False):
                # By default, the first weekday is 'Sun' (last_weekday = Weekday.SATURDAY),
                # Users are allowed to override it with 'Mon' (last_weekday = Weekday.SUNDAY).
                if 'week_start_day' in config and config['week_start_day'].lower() in ['sun', 'mon'] and config['week_start_day'].lower() == 'mon':
                    last_weekday = Weekday.SUNDAY
                else:
                    last_weekday = Weekday.SATURDAY

                # Calculate weeks_left to determine the event is in this or the next week.
                # Suppose today is Thursday, and the week_start_day is Sunday.
                # days_to_next_week = 5 (Sat) - 3 (Thu) = 2 (days)
                #
                # Consider an arbitrary event E,
                # if E has 6 days left:
                #     (6 - 2) / 7 = 0 ... 4
                # elif E has 2 days left:
                #     (2 - 2) / 7 = 0 ... 0
                #
                # Therefore, we have to apply ceiling function to weeks_left
                # in order to distinguish between current week and next week. 
                days_to_next_week = last_weekday - datetime.today().weekday()
                weeks_left = ceil((days_left - days_to_next_week) / 7) # There are 7 days in a week.

                # weeks_left == 0 iff this week;
                # weeks_left == 1 iff next week.
                if weeks_left == 0 or weeks_left == 1:
                    output_str += "Due in  " + str(days_left) + " days,"
                    output_str += "{this_or_next} {weekday})".format(
                        this_or_next="this" if weeks_left == 0 else " next",
                        weekday=self.exp_date.strftime("%A"))
                    return output_str
                elif weeks_left > 1:
                    output_str += "Due in " + str(days_left) + " days, on " + self.exp_date.strftime("%a") + " " + self.exp_date.strftime("%e") + " " + self.exp_date.strftime("%b") +  ")"
                    return output_str
            # return output_str + "In " + str(days_left) + " days, " + self.exp_date.strftime("%a") + ", " + self.exp_date.strftime("%e") + " " + self.exp_date.strftime("%b") + " " + self.exp_date.strftime("%Y") + ")" 
        else:
            return self.title + "\n\t\033[91m(" + due_string + ")"

    def __eq__(self, other):
        """ Override default equality """
        if isinstance(other, TodoItem):
            return (self.title == other.title) and (self.exp_date == other.exp_date)
        return False


def maybe_color_str(message, color_fstr, predicate=lambda: True):
    """Colors a string with color_fstr if the config has the color flag set to true
    :param message: The message to possibly colorize
    :param color_fstr: The color format string
    :param predicate: A function deciding whether the message should be colored, alongside the config file
    :return: A colored string if the config indicated color """
    if config['PY-TODO'].getboolean('color', fallback=False):
        stripped_message = esc_seq_reg.sub('', message)
        return color_fstr.format(stripped_message) if predicate() else message

    return message


def add_item(title: str, exp_date: datetime):
    """ Adds a TodoItem to the items list """
    items.append(TodoItem(title, exp_date))


def insert_todo_item(index, todo_item):
    """Inserts a TodoItem into the items list at a given index
    :param index: The index to insert at
    :param todo_item: The item to insert
    """
    index = 1
    items.insert(index, todo_item)


def remove_item(indices: list):
    """ Removes a TodoItem from the items list """
    for index in sorted(indices, reverse=True):
        del items[index-1]


def sort_items():
    """ Sorts TodoItem by their remaining days """
    items.sort(key=lambda i: i.days_left)

def list_items():
    """ Iterate through each TodoItem in the items list and print it """
    if len(items) > 0:
        print("\nToday is " + dt_string + ".\nYou have \033[1;36m[{item_count}]\033[0m item{s} left on the reminder!".format(
            item_count=len(items), s="s" if len(items) >= 2 else ""));
        for index, item in enumerate( items):
            item_str = str(item)
            index = str(index+1)

            maybe_colored_index = maybe_color_str(index + ") ", index_color)

            if '(' in item_str:
                date = item_str[item_str.index('('):]  # Slice of str from the first occurrence of "(" (inclusive)

                # The date could possibly be either color, so no harm in calling maybe_color_str multiple times
                date = maybe_color_str(date, due_color, lambda: True if due_string in date else False)
                date = maybe_color_str(date, date_color, lambda: True if due_string not in date else False)
                date = maybe_color_str(date, today_color, lambda: True if "today" in date else False)
                date = maybe_color_str(date, tomorrow_color, lambda: True if "tomorrow" in date else False)

                print("  " + maybe_colored_index + item.title + "\n\t" + date)
            else:
                print("  " + maybe_colored_index + item_str)
    else:
        print("No items left on the reminder.")

def parse_date_str(exp_date_str):
    """Parses a date string and returns a datetime object
    :param exp_date_str: the date string to validate
    :return: a valid datetime object
    """
    try:
        if exp_date_str == '':
            return None
        elif exp_date_str.endswith('d'):
            day_count = int( exp_date_str.split('d')[0] )
            return datetime.today() + timedelta(days=day_count)
        else:
            return datetime(*map(int, exp_date_str.split('/')))
    except:
        print("An error occurred while parsing your date.")
        sys.exit()


def take_input(title_pos, date_pos, default_title=None):
    """Takes a title and date from the user if not present in sys.argv
    :param title_pos: the position of the title in sys.argv
    :param date_pos: the position of the date in sys.argv
    :param default_title: the default value for the title
    :return: a tuple containing the title and date
    """
    if default_title:
        title = sys.argv[title_pos] if len(sys.argv) > title_pos else input("Title ({default_title}): ".format(default_title=default_title))
    else:
        title = sys.argv[title_pos] if len(sys.argv) > title_pos else input("Title: ")

    exp_date_str = sys.argv[date_pos] if len(sys.argv) > date_pos else input("Expiry date (YYYY/MM/DD or <days>d) (Optional): ")

    return title if title else default_title, exp_date_str


def scrape_keywords(line):
    """Scrapes keywords from an orgfile
    :param line: The line to scrape
    :returns: A (possibly empty) list of keywords
    """
    keywords = []
    todos = line.replace('#+TODO: ', '')
    for word in todos.split():
        if word != '|':
            keywords.append(word)
    return keywords


def strip_line(line, word):
    """Strips a line of its *s and keywords 
    :param line: The line to strip
    :param word: The keyword to strip from the line
    :returns: A stripped line
    """
    return line.strip('*').replace(word, '').strip()


def scrape_date(line):
    """Scrapes a date from a line known to contain a date
    :param line: A line containgin a date
    :returns: A datetime object
    """
    date = line.split('<')[1]
    match = re.search(r'\d{4}-\d{2}-\d{2}', date)
    date = match.group(0)
    date = datetime(*map(int, date.split('-')))
    return date


def usage():
    return "\nUsage: " + sys.argv[0] + " <argument>\n" \
          "\ta -a --add add                              -- Add a new item.\n" \
          "\ta -a --add <title> <date or days>           -- Add a new item with a title and expiry date provided.\n" \
          "\te -e --edit <index>                         -- Edit an item.\n" \
          "\te -e --edit <index> <title> <date or days>  -- Edit an item with a title and expiry date provided.\n" \
          "\tm -m --move <index> <new index>             -- Move an item from index to new index.\n" \
          "\tr -r --remove <indices...>                  -- Remove items by their indices.\n" \
          "\tl -l --list ls                              -- List all items.\n" \
          "\ts -s --sort                                 -- Sort items chronologically.\n" \
          "\t-org --orgfile <filename>                   -- Add org file todos.\n" \
          "\n" \
          "\th -h --help                                 -- Display help message.\n" \
          "\tv -v --version                              -- Display version info.\n" \
          "\n" \
          "Use date in format YYYY/MM/DD - 2020/07/05, or <days>d - 3d, for due date of todo item\n\n" \
          "Configuration Options (See " + config_location + config_name + "):\n" \
          "* color = true / false\n" \
          "* detail_mode = true / false\n" \
          "Reminders data file: " + datafile_location + datafile_name + "\n"


def print_version():
    print("\ntodo-ng 1.0.1 - with readline - "
           "Copyleft George Abraham\n"
           "Based on py-todo by Marco Wang\n"
           "For license, see https://github.com/georgeabr/todo-ng\n")



if __name__ == '__main__':
    # mkdir -p on config_location and datafile_location.
    Path(config_location).mkdir(parents=True, exist_ok=True)
    Path(datafile_location).mkdir(parents=True, exist_ok=True)

    # Try to load user configuration.
    config = ConfigParser()

    # Default configuration
    config['PY-TODO'] = {
        'color': False,
        'detail_mode': False,
        'week_start_day': 'Sun'
    }

    if not os.path.isfile(os.path.join(config_location, config_name)):

        # If a config file doesn't exist, write the default one
        with open(os.path.join(config_location, config_name), 'w+') as configfile:
            config.write(configfile)
    else:
        config.read(os.path.join(config_location, config_name))
 
    # Try to unpickle todo list from the file.
    try:
        with open(datafile_location + datafile_name, 'rb') as f:
            items = pickle.load(f)
    except:
        pass

    # Command line argument parsing
    if len(sys.argv) <= 1:
        list_items(); print();

    elif sys.argv[1] in ['ls', 'l', '-l', '--list']:
        list_items()

    elif sys.argv[1] in ['a', 'add',  '-a', '--add']:
        try:
            title, exp_date_str = take_input(2, 3)

            exp_date = parse_date_str(exp_date_str)
            add_item(title, exp_date)
            list_items(); print();
        except KeyboardInterrupt:
            # If the input is canceled, print a newline for prettiness, list the items and exit
            print()
            list_items()
            sys.exit(1)

    elif sys.argv[1] in ['r', '-r', '--remove']:
        if len(sys.argv) >= 3:
            try:
                indices = list(map(int, sys.argv[2:]))
                remove_item(indices)
                list_items(); print();
            except:
                print("Item does not exist.")
                print("fuckfuckfuck" + str(indices))
        else:
            print(usage())

    elif sys.argv[1] in ['e', '-e', '--edit']:
        if len(sys.argv) >= 3:
            try:
                item = items[int(sys.argv[2])-1]
                title, exp_date_str = take_input(3, 4, default_title=item.title)

                item.title = title
                item.exp_date = parse_date_str(exp_date_str)
                list_items(); print();
            except IndexError:
                print("Item does not exist.")
                sys.exit()
            except KeyboardInterrupt:
                # If the input is canceled, print a newline for prettiness, list the items and exit
                # We don't need to re-add the old item here because if input is canceled, we never actually changed it
                print()
                list_items()
                sys.exit()
        else:
            print(usage())

    elif sys.argv[1] in ["m", "-m", "--move"]:
        if len(sys.argv) == 4:
            try:
                """ currently borked """
                to_move = items[int(sys.argv[2])-1]
                remove_item([int(sys.argv[2])-1])
                insert_todo_item(int(sys.argv[3])-1, to_move)
            except (IndexError, ValueError):
                print("Item does not exist.")
                sys.exit(1)

            list_items()

        else:
            print(usage())

    elif sys.argv[1] in ['s', '-s', '--sort']:
        sort_items()
        list_items()

    elif sys.argv[1] in ['org', '-org', '--orgfile']:
        keywords = []
        filename = str(sys.argv[2])
        # Open the orgfile
        with open(filename, 'r') as f:
            content = f.readlines()

        for index, line in enumerate(content):
            # Search for the header to obtain the keywords
            if "#+TODO:" in line:
                keywords.extend(scrape_keywords(line))
            else:
                if not keywords:
                    keywords.append('TODO')
                    keywords.append('DONE')
                for word in keywords:
                    # Search in each line and format if match
                    if word in line and '*' in line:
                        title = strip_line(line, word)
                        try:
                            if ': <' in content[index + 1]:
                                add_item(title, scrape_date(content[index + 1]))
                            else:
                                add_item(title, None)
                        except IndexError:
                            add_item(title, None)
        list_items()

    elif sys.argv[1] in ['v', '-v', '--version']:
        print_version()

    else:
        print(usage())

    # Write all changes back to the file.
    with open(datafile_location + datafile_name, 'wb') as f:
        pickle.dump(items, f)
